generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id       String    @id @default(cuid())
  name     String
  members  Member[]
  elements Element[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Element {
  id     String      @id @default(cuid())
  type   ElementType
  x      Float
  y      Float
  width  Float
  height Float
  scaleX Float       @default(1)
  scaleY Float       @default(1)
  angle  Float       @default(0)
  zIndex Int         @default(0)

  image Image?
  text  Text?
  shape Shape?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([id, type])
  @@unique([id, projectId])
  @@index([id, projectId])
  @@index([zIndex])
}

enum ElementType {
  IMAGE
  TEXT
  SHAPE
}

model Image {
  id  String @id @default(cuid())
  url String

  element   Element @relation(fields: [elementId], references: [id], onDelete: Cascade)
  elementId String  @unique

  @@index([elementId])
}

model Text {
  id         String  @id @default(cuid())
  content    String
  fontSize   Int     @default(16)
  fontFamily String?
  color      Int?

  element   Element @relation(fields: [elementId], references: [id], onDelete: Cascade)
  elementId String  @unique

  @@index([elementId])
}

model Shape {
  id          String    @id @default(cuid())
  shapeType   ShapeType
  fill        Int?
  stroke      Int?
  strokeWidth Float?
  points      Float[]

  element   Element @relation(fields: [elementId], references: [id], onDelete: Cascade)
  elementId String  @unique

  @@index([elementId])
}

enum ShapeType {
  RECTANGLE
  CIRCLE
}

enum Role {
  OWNER
  EDITOR
  VIEWER
}

model Member {
  userId    String
  projectId String
  role      Role   @default(VIEWER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id(name: "memberId", [userId, projectId])
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  members       Member[]

  @@unique([email])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

name: CI Pipeline

on:
  workflow_dispatch:
    inputs:
      production-deploy:
        type: boolean
        description: Trigger production deploy
  push:
    branches: [master]
    tags:
      - "v*"
  pull_request:
    branches: [master]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Copy env file
        working-directory: apps/api
        run: cp example.env .env

      - name: Generate prisma types
        working-directory: apps/api
        run: bunx prisma generate

      - name: Check types
        run: bun run types

      - name: Run backend tests
        working-directory: apps/api
        run: bun test

  build-backend:
    needs: backend-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate prisma types
        working-directory: apps/api
        run: bunx prisma generate

      - name: Build backend
        working-directory: apps/api
        run: bun run build

      - name: Upload backend build
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: apps/api/build
          retention-days: ${{ inputs.production-deploy == true && 90 || 2 }}

  build-frontend:
    needs: backend-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: apps/web/build/cache
          key: ${{ runner.os }}-next-${{ hashFiles('bun.lock', 'apps/**/*.{ts,tsx,js,jsx}') }}

      - name: Set up bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Copy env file
        working-directory: apps/web
        run: cp example.env.local .env.local

      - name: Generate prisma types
        working-directory: apps/api
        run: bunx prisma generate

      - name: Build frontend
        working-directory: apps/web
        run: bun run build

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: apps/web/build
          retention-days: ${{ inputs.production-deploy == true && 90 || 2 }}

  run-tests:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          PGPASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5434:5432
      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: apps/web/build/cache
          key: ${{ runner.os }}-next-${{ hashFiles('bun.lock', 'apps/**/*.{ts,tsx,js,jsx}') }}

      - name: Download backend build
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: apps/api/build

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: apps/web/build

      - name: Set up bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --ignore-scripts

      - name: Copy env files
        run: |
          cp apps/web/example.env.local apps/web/.env.local
          cp apps/api/example.env apps/api/.env

      - name: Generate prisma types
        working-directory: apps/api
        run: bunx prisma generate

      - name: Migrate database
        run: bun run migrate:test

      - name: Start backend
        working-directory: apps/api
        run: bun run start &

      - name: Start frontend
        working-directory: apps/web
        run: bun run start &

      - name: Wait for services to be up
        run: |
          timeout 30s sh -c 'until curl -s http://localhost:3000 >/dev/null; do sleep 1; done'
          timeout 30s sh -c 'until curl -s http://localhost:4000 >/dev/null; do sleep 1; done'

      - name: Install playwright
        run: npx playwright install chromium --with-deps --only-shell

      - name: Run frontend tests
        run: cd apps/web && bun run test

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: apps/web/playwright-report/
          retention-days: 30

  deploy-frontend:
    needs: [run-tests]
    if: inputs.production-deploy == true || startswith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.PRODUCTION_VERCEL_PROJECT_ID }}
          vercel-args: "--prod"
